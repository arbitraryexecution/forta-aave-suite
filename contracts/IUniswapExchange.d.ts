/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IUniswapExchangeInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "AddLiquidity(address,uint256,uint256)": EventFragment;
    "EthPurchase(address,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256)": EventFragment;
    "TokenPurchase(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPurchase"): EventFragment;
}

export class IUniswapExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUniswapExchangeInterface;

  functions: {};

  callStatic: {};

  filters: {
    AddLiquidity(
      provider?: string | null,
      eth_amount?: BigNumberish | null,
      token_amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { provider: string; eth_amount: BigNumber; token_amount: BigNumber }
    >;

    EthPurchase(
      buyer?: string | null,
      tokens_sold?: BigNumberish | null,
      eth_bought?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; tokens_sold: BigNumber; eth_bought: BigNumber }
    >;

    RemoveLiquidity(
      provider?: string | null,
      eth_amount?: BigNumberish | null,
      token_amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { provider: string; eth_amount: BigNumber; token_amount: BigNumber }
    >;

    TokenPurchase(
      buyer?: string | null,
      eth_sold?: BigNumberish | null,
      tokens_bought?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; eth_sold: BigNumber; tokens_bought: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
